generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  username        String            @unique
  email           String?
  password        String
  firstName       String?
  lastName        String?
  birthDate       DateTime?
  fatherName      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  roleId          String
  balanceIRT      Float             @default(0)
  balanceUSDT     Float             @default(0)
  bankCards       BankCard[]
  media           Media[]
  sessions        Session[]
  Transaction     Transaction[]
  role            Role              @relation(fields: [roleId], references: [id])
  permissions     UserPermission[]
  kycVerification KycVerification?  @relation(name: "KycUser")
  approvedKycs    KycVerification[] @relation(name: "KycApprovedBy")
  rejectedKycs    KycVerification[] @relation(name: "KycRejectedBy")
  otps            Otp[]

  @@index([username])
  @@index([email])
  @@index([roleId])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
  users       UserPermission[]

  @@unique([resource, action])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId])
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  browser    String?
  deviceType String?
  ipAddress  String?
  userAgent  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@index([userAgent])
  @@index([ipAddress])
  @@index([deviceType])
  @@index([browser])
  @@index([userId])
}

model BankCard {
  id          String        @id @default(cuid())
  cardNumber  String
  userId      String
  isDefault   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]

  @@unique([userId, cardNumber])
  @@index([userId])
  @@index([isDefault])
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  type            TransactionType
  currency        CurrencyType
  amount          Float
  status          TransactionStatus @default(PENDING)
  description     String?
  bankCardId      String?
  transactionHash String?
  fromAddress     String?
  toAddress       String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bankCard        BankCard?         @relation(fields: [bankCardId], references: [id])
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([currency])
  @@index([status])
  @@index([createdAt])
  @@index([bankCardId])
}

model WalletAddress {
  id        String   @id @default(cuid())
  network   String
  address   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([network])
  @@index([address])
  @@index([isActive])
}

model Media {
  id           String          @id @default(cuid())
  reason       MediaReason
  visibility   MediaVisibility @default(PRIVATE)
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  storagePath  String
  metadata     Json?
  ownerId      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  owner        User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([reason])
  @@index([visibility])
  @@index([createdAt])
}

model Otp {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SystemCapacity {
  id        String       @id @default(cuid())
  currency  CurrencyType
  amount    Float
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([currency])
  @@index([currency])
}

model KycVerification {
  id                   String     @id @default(cuid())
  userId               String
  step1Status          KycStatus?
  step2Status          KycStatus?
  step1VerifiedAt      DateTime?
  step2VerifiedAt      DateTime?
  step1RejectedAt      DateTime?
  step2RejectedAt      DateTime?
  step1RejectionReason String?    @db.Text
  step2RejectionReason String?    @db.Text
  adminNotes           String?    @db.Text
  lastStepUpdatedAt    DateTime   @default(now())
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  nationalId           String
  mobile               String
  birthDate            DateTime
  selfieMediaId        String?
  signedTextMediaId    String?
  nationalCardMediaId  String?
  approvedById         String?
  rejectedById         String?
  approvedBy           User?      @relation(fields: [approvedById], references: [id], name: "KycApprovedBy")
  rejectedBy           User?      @relation(fields: [rejectedById], references: [id], name: "KycRejectedBy")

  // روابط
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "KycUser")

  @@unique([userId])
  @@index([userId])
  @@index([createdAt])
}

model UsdtPrice {
  id        String   @id @default(cuid())
  buyPrice  Float
  sellPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  CAPACITY
}

enum CurrencyType {
  IRT
  USDT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum MediaReason {
  KYC
  PROFILE_AVATAR
  DOCUMENT_VERIFICATION
  BUSINESS_LICENSE
}

enum MediaVisibility {
  PUBLIC
  PRIVATE
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}
