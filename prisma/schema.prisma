generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(cuid())
  username    String           @unique
  email       String?
  password    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roleId      String
  balanceIRT  Float            @default(0)
  balanceUSDT Float            @default(0)
  bankCards   BankCard[]
  media       Media[]
  sessions    Session[]
  todos       Todo[]
  Transaction Transaction[]
  role        Role             @relation(fields: [roleId], references: [id])
  permissions UserPermission[]

  @@index([username])
  @@index([email])
  @@index([roleId], map: "User_roleId_fkey")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
  users       UserPermission[]

  @@unique([resource, action])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([permissionId], map: "UserPermission_permissionId_fkey")
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  browser    String?
  deviceType String?
  ipAddress  String?
  userAgent  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@index([userAgent])
  @@index([ipAddress])
  @@index([deviceType])
  @@index([browser])
  @@index([userId], map: "Session_userId_fkey")
}

model Todo {
  id        String   @id @default(cuid())
  text      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Todo_userId_fkey")
}

model BankCard {
  id          String        @id @default(cuid())
  cardNumber  String
  userId      String
  isDefault   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]

  @@unique([userId, cardNumber])
  @@index([userId])
  @@index([isDefault])
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  type            TransactionType
  currency        CurrencyType
  amount          Float
  status          TransactionStatus @default(PENDING)
  description     String?
  bankCardId      String?
  transactionHash String?
  fromAddress     String?
  toAddress       String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bankCard        BankCard?         @relation(fields: [bankCardId], references: [id])
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([currency])
  @@index([status])
  @@index([createdAt])
  @@index([bankCardId], map: "Transaction_bankCardId_fkey")
}

model WalletAddress {
  id        String   @id @default(cuid())
  network   String
  address   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([network])
  @@index([address])
  @@index([isActive])
}

model Media {
  id           String          @id @default(cuid())
  reason       MediaReason
  visibility   MediaVisibility @default(PRIVATE)
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  storagePath  String
  metadata     Json?
  ownerId      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  owner        User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([reason])
  @@index([visibility])
  @@index([createdAt])
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum CurrencyType {
  IRT
  USDT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum MediaReason {
  KYC
  PROFILE_AVATAR
  DOCUMENT_VERIFICATION
  BUSINESS_LICENSE
}

enum MediaVisibility {
  PUBLIC
  PRIVATE
}
